// RPGGame
// Ability.cpp
// Justyn Durnford
// Created on 5/15/2020
// Last updated on 5/22/2020

#include "Ability.hpp"

#include "Pokemon.hpp"
class Pokemon;
class Player_Pokemon;

#include "Type.hpp"
struct Type;

#include "Enviornment.hpp"
class Enviornment;

#include <string>
using std::string;

#include <array>

#include <memory>
using std::shared_ptr;
using std::make_shared;

Ability::Ability() { /* See Ability.hpp for default values */ }

Ability::Ability(const string& name, const string& desc, unsigned short int id, unsigned char type)
{
	_name = name;
	_desc = desc;
	_id = id;
	_type = type;
}

Ability::~Ability() { /* Destructor */ }

string Ability::name() const
{
	return _name;
}

string Ability::desc() const
{
	return _desc;
}

unsigned short int Ability::id() const
{
	return _id;
}

unsigned char Ability::type() const
{
	return _type;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

shared_ptr<Ability> Air_Lock = make_shared<Ability>
(
	"Air Lock", "The pokemon clears the weather upon entering battle.", 0, 0
);
void _Air_Lock(Enviornment& env)
{
	env.setWeather(nullptr);
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

shared_ptr<Ability> Cute_Charm = make_shared<Ability>
(
	"Cute Charm", "Opposing pokemon may become infatuated upon making contact.", 0, 0
);
void _Cute_Charm(Player_Pokemon& pokemon)
{

}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

shared_ptr<Ability> Drizzle = make_shared<Ability>
(
	"Drizzle", "The pokemon causes heavy rain upon entering battle.", 0, 0
);
void _Drizzle(Enviornment& env)
{
	env.setWeather(Rain_Weather);
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

shared_ptr<Ability> Drought = make_shared<Ability>
(
	"Drought", "The pokemon causes harsh sunlight upon entering battle.", 0, 0
);
void _Drought(Enviornment& env)
{
	env.setWeather(Sunny_Weather);
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

extern std::shared_ptr<Ability> Huge_Power = make_shared<Ability>
(
	"Huge Power", "Doubles the power of the pokemon's physical attacks.", 0, 0
);
void _Huge_Power(Player_Pokemon& pokemon)
{

}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

shared_ptr<Ability> Intimidate = make_shared<Ability>
(
	"Intimidate", "THe pokemon lowers opposing pokemons' attack upon entering battle.", 0, 0
);
void _Intimidate(Player_Pokemon& pokemon)
{

}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

extern std::shared_ptr<Ability> Magic_Guard = make_shared<Ability>
(
	"Magic Guard", "The pokemon only takes damage from attacks.", 0, 0
);
void _Magic_Guard(Player_Pokemon& pokemon)
{

}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////